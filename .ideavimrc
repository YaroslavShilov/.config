let mapleader = "\<space>"

":noh - stop the highlighting

"" Source your .vimrc
"source ~/.vimrc

"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"" Map \r to the Reformat Code action
"map \r <Action>(ReformatCode)

"" Map <leader>d to start debug
"map <leader>d <Action>(Debug)

"" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)


" Find more examples here: https://jb.gg/share-ideavimrc


" NerdTree"
Plug 'preservim/nerdtree'

" Do incremental searching.
set incsearch

" Show numbers and relative numbers from your cursor
set number
set relativenumber

set surround (vim) " work with brackets

" Which-key
" let g:WhichKeyDesc_mc = "mc Desc"
" let g:WhichKeyDesc_ctrl_x_mc = "<C-x>mc Desc"
"leader doesn't work
" let g:WhichKeyDesc_leader_mc = "<leader>mc Desc"
set which-key
set timeoutlen=100000
let g:WhichKey_ShowVimActions = "false"



" Multiple Cursors
Plug 'terryma/vim-multiple-cursors'

" -- take alt + j
"nmap mc <A-n>
let g:WhichKeyDesc_mc = "mc Select Next Occurrence"
"nmap mc <Action>(SelectNextOccurrence) //doesn't go to the beginning of the document
"vmap mc <Action>(SelectNextOccurrence)
nmap mc <Plug>NextWholeOccurrence
xmap mc <Plug>NextWholeOccurrence


" -- skip F3
"nmap mx <A-x>
let g:WhichKeyDesc_mx = "mx Next Occurrence"
"nmap mx <Action>(FindNext)
"vmap mx <Action>(FindNext)
xmap mx <Plug>SkipOccurrence

" -- prev unselected Shift + F3
"nmap ???
"let g:WhichKeyDesc_mu = "mu Previous Unselected Occurrence"
"nmap mu <Action>(FindPrevious)
"vmap mu <Action>(FindPrevious)

" -- prev selected  alt + shift + j
"nmap mp <A-p>
let g:WhichKeyDesc_mp = "mp Previous Selected Occurrence"
"nmap mp <Action>(UnselectPreviousOccurrence)
"vmap mp <Action>(UnselectPreviousOccurrence)
xmap mp <Plug>RemoveOccurrence

" -- select all " shift + ctrl + alt + j
"nmap ???
let g:WhichKeyDesc_ma = "ma Select All Occurrences"
nmap ma <Action>(SelectAllOccurrences)
vmap ma <Action>(SelectAllOccurrences)

" Easy motion plugin
" Plug 'easymotion/vim-easymotion'
" ctrl + ; + findName"
set easymotion


" Don't use Ex mode, use Q for formatting.
map Q gq

" ---- Mapping ---
"i - insert mode
"n - normal mode
" jj - get out of insert mode
" inoremap jj <Esc>

" -- Save cursor position before entering visual mode
" -- use double ` to go back
nnoremap v m`v
vnoremap v m`v
nnoremap V m`V
vnoremap V m`V

" -- page 1/2 up / down using alt + u / d
nnoremap <a-d> <c-d>
nnoremap <a-u> <c-u>
" -- Use it for v mode
vmap <a-d> 10j
vmap <a-u> 10k
set scroll=15 "Doesn't work in v mode
set scrolloff=10 "Minimal number of lines above and below the cursor

" -- switch between windows
nnoremap <a-w> <c-w>

" add tabs and remove tabs by <tab> and <shift + tab>
vnoremap <tab> >gv
nnoremap <tab> >>

" -- Code Edit
" nmap <leader>rn <Action>(RenameElement) Shift + F6

" -- Go to
let g:WhichKeyDesc_gd = "gd Go to Declaration"
nmap gd <Action>(GotoDeclaration)

let g:WhichKeyDesc_gD = "gD Go to Type Declaration"
nmap gD <Action>(GotoTypeDeclaration)

let g:WhichKeyDesc_gi = "gi Go to Implementation"
nmap gi <Action>(GotoImplementation)

let g:WhichKeyDesc_gb = "gb Go Back"
nmap gb <Action>(Back)

let g:WhichKeyDesc_gf = "gf Go Forward"
nmap gf <Action>(Forward)

" -- Error
"nmap <leader>e <Action>(GotoNextError) " F2
"nmap <leader>E <Action>(GotoPreviousError) " Shift + F2


" --- Search
"let g:WhichKeyDesc_leader_sf = "ff Search File"
nmap <leader>ff <Action>(GotoFile)

"let g:WhichKeyDesc_leader_sa = "fg Live grep"
nmap <leader>fg <Action>(FindInPath)

"let g:WhichKeyDesc_leader_sa = "fa Search Action"
nmap <leader>fa <Action>(GotoAction)

"let g:WhichKeyDesc_leader_se = "fe Search Everywhere"
nmap <leader>fe <Action>(SearchEverywhere)

" -- Move Tabs
let g:WhichKeyDesc_mo = "mo Move Tab Opposite Group"
nmap <leader>mo <Action>(MoveEditorToOppositeTabGroup)

let g:WhichKeyDesc_ml = "ml Move Tab Left"
nmap <leader>ml :tabm-1 <CR>


let g:WhichKeyDesc_mr = "mr Move Tab Right"
nmap <leader>mr :tabm+1 <CR>

"let g:WhichKeyDesc_leader_rc = "<leader>rc Reopen Closed Tab"
nmap <leader>rc <Action>(ReopenClosedTab)


" --- Quick Info
let g:WhichKeyDesc_qc = "qc Context Info"
nmap qc <Action>(EditorContextInfo)

let g:WhichKeyDesc_qe = "qe Error Description"
nmap qe <Action>(ShowErrorDescription)

let g:WhichKeyDesc_qd = "qd Documentation"
nmap qd <Action>(QuickJavaDoc)

let g:WhichKeyDesc_qp = "qp Parameter Info"
nmap qp <Action>(ParameterInfo)

" -- todo window
"let g:WhichKeyDesc_leader_to = "to TODO Window"
nmap <leader>to <Action>(ActivateTODOToolWindow)

"-- configure keymaps
"let g:WhichKeyDesc_leader_km = "km Change Keymap Window"
nmap <leader>km <Action>(ChangeKeymap)

" -- SHORTCUTS used by VIM instead of IDEA -- "
" Ctrl+;
" Ctrl+Shift+;
" Alt+D
